#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jun 29 19:23:22 2021

@author: alexanderel-hajj
"""

from ibapi.client import EClient
from ibapi.wrapper import EWrapper
from ibapi.contract import Contract
from ibapi.order import *
from threading import Timer
import threading
#import threading
import time

class IBapi(EWrapper, EClient):
    
    def __init__(self):
#        Ticker, expiry, strikePrice, CallPut, limitPrice, 
#                 totQuantity, primExchange, limit=, buy):
        EClient.__init__(self, self)
#        self.Ticker=Ticker
#        self.expiry=expiry
#        self.strikePrice=strikePrice
#        self.CallPut=CallPut
#        self.limitPrice=limitPrice
#        self.totQuantity=totQuantity
#        self.primExchange=primExchange
#        self.limit=True
#        self.buy=True
        
    def error(self, reqId , errorCode, errorString):
        print("Error: ", reqId, " ", errorCode, " ", errorString)

    def nextValidId(self, orderId: int):
        super().nextValidId(orderId)
        self.nextorderId = orderId
        print('The next valid order id is: ', self.nextorderId)
    def orderStatus(self, orderId, status, filled, remaining, avgFullPrice, permId, parentId, lastFillPrice, clientId, whyHeld, mktCapPrice):
        print('orderStatus - orderid:', orderId, 'status:', status, 'filled', filled, 'remaining', remaining, 'lastFillPrice', lastFillPrice)
    def openOrder(self, orderId, contract, order, orderState):
        print('openOrder id:', orderId, contract.symbol, contract.secType, '@', contract.exchange, ':', order.action, order.orderType, order.totalQuantity, orderState.status)
    def execDetails(self, reqId, contract, execution):
        print('Order Executed: ', reqId, contract.symbol, contract.secType, contract.currency, execution.execId, execution.orderId, execution.shares, execution.lastLiquidity)
    def contractDetails(self, reqId: int, contractDetails):
        """
        The first function is contractDetails: a function of the EWrapper. 
        When we request contract details, it will get returned here.
        
        We will store whatever is returned here in a dictionary file.
        The request id, or reqId, that we use to make the request,
        will be used as the key value for the dictionary.
        """
        self.contract_details[reqId] = contractDetails
        
    # Use the reqContractDetails functions of the API. 
    # It will return a contract with the ConID already filled in.
    def get_contract_details(self, reqId, contract):
        """
        For requesting contract details. 
        To access it, we have to pass through a reqId and 
        the contract that we are requesting details for.
        
        There are a number of things involved in this custom function. 
        1. It makes the request for data;
        2. It creates the variable where the data is stored;
        3. It has some error checking to make sure the data is in fact 
        returned and that there are no problems;
        4. It waits for the data, so other commands are not executed 
        before the data comes in.
        """
        # Create a variable to store our incoming data. Set to None
        # Can check later on if the var has a value to confirm data arrived
        self.contract_details[reqId] = None
        
        # Next, the function will send the request to the API
        self.reqContractDetails(reqId, contract)
        
		#Error checking loop - breaks from loop once contract details are obtained
        # Check to see if our data has arrived. Loop set to run 50 times. 
        # In each iteration, it checks to see if our contract details 
        # have been returned, and if so, the loop is broken.
        for err_check in range(50):
            if not self.contract_details[reqId]:
                time.sleep(0.1)
            else:
                break
		#Raise if error checking loop count maxed out (contract details not obtained)
        # If loop runs a full 50x, meaning it didnâ€™t successfully break out,
        # value of err_check=49. In this case, we raise an exception to alert us that 
        # there is a problem getting the contract details.
        if err_check == 49:
            raise Exception('error getting contract details')
		#Return contract details otherwise
        return self.contract_details[reqId].contract
    
    def start(self):
        contract = Contract()
        contract.symbol = 'AAPL'
        contract.secType = 'OPT'
        contract.exchange = "SMART"
        contract.currency = "USD"
#        contract.primaryExchange = 'NASDAQ'
        contract.lastTradeDateOrContractMonth = '20210716'
        contract.strike = 140
        contract.right = 'C' # call option
        contract.multiplier = '100'

    #Create order object
        order = Order()
#        if buy:
        order.action = "BUY"
#        else:
#        order.action = "SELL"
        order.totalQuantity = 1
#        if limit:
        order.orderType = "LMT"
        order.tif = 'DAY'
        order.allornone = True
#        else:
#        order.orderType = "MKT"
        order.lmtPrice = 0.73 # verify with options chain first
        
        """
        Verification of limit price here...
        """
        return contract, order
    
    def stop(self):
        self.done = True
        self.disconnect()
        
    def cancel(self):
        self.cancelOrder(self.nextorderId)
        
def main():
    
    def run_loop():
        	app.run()

    app = IBapi()
    app.connect("127.0.0.1", 7497, 123)

    app.nextorderId = None
    
    #Start the socket in a thread
    api_thread = threading.Thread(target=run_loop, daemon=True)
    api_thread.start()
    
    #Check if the API is connected via orderid
    while True:
        if isinstance(app.nextorderId, int):
            print('connected')
            break
        else:
            print('waiting for connection')
            time.sleep(1) 
            
    contract, order = app.start()
    app.placeOrder(app.nextorderId, contract, order)
    app.nextorderId += 1
    
    time.sleep(3)
    
    # 'AAPL', '20210716', 140, 'C', 0.75, 1, 'NASDAQ'
#    Timer(3, app.stop).start()
#    app.run()

if __name__ == "__main__":
    main()



